---

- name: Gather package facts
  ansible.builtin.package_facts:

# INFO only required to free up some space in ubuntu vbox vm
- name: Purge snap on ubuntu
  when: ansible_distribution == "Ubuntu" and "snapd" in ansible_facts.packages
  ansible.builtin.include_tasks:
    file: purge_snap.yml

- name: Check for credentials
  ansible.builtin.assert:
    that:
      - sidefx_client_id is defined
      - sidefx_client_secret_key is defined
    fail_msg: "Houdini download api credentials not defined"
    quiet: true

- name: Check for existing houdini install
  ansible.builtin.stat:
    path: "{{ houdini_install_dir }}/houdini.uninstall"
  register: houdini_installation_path

- name: Get remote houdini installer
  when: not houdini_installation_path.stat.exists
  ansible.builtin.include_tasks:
    file: prepare_installer.yml

- name: "Include dependencies"
  ansible.builtin.include_tasks:
    file: dependencies.yml

- name: Get systemd service file
  ansible.builtin.stat:
    path: "/etc/systemd/system/sesinetd.service"
  register: sesinetd_service_result

- name: Set SELinux to permissive
  when: ansible_os_family == "RedHat" and not sesinetd_service_result.stat.exists
  become: true
  ansible.posix.selinux:
    policy: targeted
    state: permissive

- name: "Include installer"
  when: not houdini_installation_path.stat.exists
  ansible.builtin.include_tasks:
    file: run_installer.yml

- name: Check for existing houdini license file
  ansible.builtin.stat:
    path: "/usr/lib/sesi/licenses"
  register: h_license_file

- name: Inlcude apprentice license
  when: not h_license_file.stat.exists
  ansible.builtin.include_tasks:
    file: apprentice_license.yml

- name: Include local license service
  when: '"license" in houdini_features'
  ansible.builtin.include_tasks:
    file: local_license_service.yml

- name: Register license service with selinux
  when: ansible_os_family == "RedHat" and "license" in houdini_features
  ansible.builtin.include_tasks:
    file: license_service_selinux.yml

- name: Set SELinux back to enforcing
  when: ansible_os_family == "RedHat"
  become: true
  ansible.posix.selinux:
    policy: targeted
    state: enforcing

- name: Cleanup
  become: true
  ansible.builtin.file:
    path:
      - "{{ download_script_venv_path }}"
      - "{{ license_selinux_module_tmp_dir }}"
      - "{{ houdini_package_dir }}"
    state: absent

...
